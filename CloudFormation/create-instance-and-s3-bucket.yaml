---
AWSTemplateFormatVersion: 2010-09-09   

Parameters:
  S3BucketName:
    Type: String
    MinLength: 5
    MaxLength: 25
    Description: Enter a unique name for your S3 Bucket (5-25 chars)
  
  EnvironmentName:
    Type: String
    Description: Enter an Environment name
    Default: Dev
    AllowedValues:
      - Dev
      - Prod
      - Stage

  EC2type:
    Type: String
    Description: Enter an Instance type
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium

  S3Purpose:
    Type: String
    Description: Required. What is the purpose of this bucket?
    AllowedValues:
      - Quick
      - Personal
      - Prod
      - Dev
      - Test

  LatestAmazonLinux2AmiId:
    Type: AWS::EC2::Image::Id
    Description: AMI Id for the EC2 Instances.
    Default: ami-0453898e98046c639

  UserSecurityGroup:
    Type: AWS::EC2::SecurityGroup::GroupName
    Description: Choose a security group

  UserKeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Choose a suitable Key Pair Name

Mappings:
  ClientMap: ### <---- map name
    Quick: ### <--- top level key
      TagMessage: Bucket created as a quick storage medium
    Personal:
      TagMessage: Bucket created for personal use
    Prod:
      TagMessage: Bucket created for use in a production environment
    Dev:
      TagMessage: Bucket created for use in a development environment
    Test:
      TagMessage: Bucket created for use in a test environment

Resources:
  BrendanS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      Tags:
        - Key: Env
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Sub "${AWS::AccountId}"
        - Key: Client
          Value: !FindInMap
            - ClientMap   # <----- map name
            - !Ref S3Purpose  # <------ Reference I'm basing it on
            - TagMessage  # <----- 2nd level key

  AnEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2type
      ImageId: !Ref LatestAmazonLinux2AmiId
      KeyName: !Ref UserKeyPairName
      AvailabilityZone: !Select [ 1, !GetAZs ""] # us-east-1b if in us-east region for example
      SecurityGroups:
        - !Ref UserSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemctl enable httpd
          echo "<h1> Hello from me </h1>" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value:  
            Fn::Sub: "${AWS::StackName}-Instance-1"

Outputs:

  BucketNameOutput:
    Description: "Bucket name"
    Value: !Ref S3BucketName
  
  ARNofBucket:
    Description: ARN of bucket
    Value: !GetAtt BrendanS3Bucket.Arn

  JoinArn:
    Value: !Join
      - ''
      - - 'arn:aws:s3:::'
        - !Ref S3BucketName

  SubArn:
    Value: !Sub
      - 'arn:aws:s3:::${S3Var}'
      - { S3Var: !Ref S3BucketName }

